type User = 
 record {
   balance: nat;
   isVerified: bool;
   name: text;
   passwordHash: blob;
   "principal": principal;
   registeredAt: int;
 };
type Result_4 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_3 = 
 variant {
   err: text;
   ok: AnimalId;
 };
type Result_2 = 
 variant {
   err: text;
   ok: text;
 };
type Result_1 = 
 variant {
   err: text;
   ok;
 };
type Result = 
 variant {
   err: text;
   ok: principal;
 };
type MicrochipId = text;
type Litter = 
 record {
   birthDate: int;
   breeder: principal;
   dam: AnimalId;
   id: text;
   offspring: vec AnimalId;
   sire: AnimalId;
 };
type DNAHash = text;
type BreederStats = 
 record {
   breeder: principal;
   reputationScore: nat;
   totalAnimals: nat;
   verifiedAnimals: nat;
 };
type BreedNFT = 
 record {
   breed: text;
   id: nat;
   imageUrl: text;
   owner: principal;
 };
type AnimalId = text;
type Animal = 
 record {
   birthDate: int;
   breed: text;
   breeder: principal;
   dam: opt AnimalId;
   dnaHash: opt DNAHash;
   id: AnimalId;
   isVerified: bool;
   microchipId: MicrochipId;
   name: text;
   owner: principal;
   sire: opt AnimalId;
   species: text;
 };
service : {
  getAllAnimals: () -> (vec Animal) query;
  getAllBreedNFTs: () -> (vec BreedNFT) query;
  getAllUsers: () -> (vec User) query;
  getAnimal: (animalId: AnimalId) -> (opt Animal) query;
  getAnimalsByBreeder: (breeder: principal) -> (vec Animal) query;
  getAnimalsByOwner: (owner: principal) -> (vec Animal) query;
  getBalance: ("principal": principal) -> (nat) query;
  getBreedNFTsByOwner: (owner: principal) -> (vec BreedNFT) query;
  getBreederStats: (breeder: principal) -> (opt BreederStats) query;
  getLineage: (animalId: AnimalId) -> (vec Animal) query;
  getLitter: (litterId: text) -> (opt Litter) query;
  getStats: () ->
   (record {
      totalAnimals: nat;
      totalBreeders: nat;
      totalLitters: nat;
      verifiedAnimals: nat;
    }) query;
  getUser: ("principal": principal) -> (opt User) query;
  isUserRegistered: ("principal": principal) -> (bool) query;
  isUserRegisteredByName: (name: text) -> (bool) query;
  isUserVerified: ("principal": principal) -> (bool) query;
  mintBreedNFT: (breed: text) -> (Result_4);
  registerAnimal: (microchipId: MicrochipId, species: text, breed: text,
   name: text, sire: opt AnimalId, dam: opt AnimalId, dnaHash:
   opt DNAHash) -> (Result_3);
  registerLitter: (sire: AnimalId, dam: AnimalId, offspring: vec AnimalId) ->
   (Result_2);
  registerUser: () -> (Result_1);
  registerUserByName: (name: text, password: text) -> (Result_1);
  transferOwnership: (animalId: AnimalId, newOwner: principal) -> (Result_1);
  verifyAnimal: (animalId: AnimalId) -> (Result_1);
  verifyMicrochip: (microchipId: MicrochipId) -> (opt AnimalId) query;
  verifyUser: () -> (Result_1);
  verifyUserByName: (name: text, password: text) -> (Result);
}
